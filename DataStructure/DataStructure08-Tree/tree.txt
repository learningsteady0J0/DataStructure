트리 - 계층적 관계를 표현하는 자료구조

트리의 ADT는 트리의 구조로 이뤄진 무엇인가를 표현하기에 적절히 정의되어 있는지 보아야한다.
트리의 예) 집안의 족보, 기업의 조직도 등

노드 node	트리의 구성요소에 해당하는 요소
간선 edge	노드와 노드를 연결하는 연결선
루트 노드 root node	트리 구조에서 최상위에 존재하는 노드
단말 노드 terminal node (잎사귀 노드 leaf node) 아래로 또 다른 노드가 연결되어 있지 않은 노드
내부 노드 internal node 비단말 노드( noninternal node) 단말 노드를 제외한 모든 노드

이진트리
-루트 노드를 중심으로 두 개의 서브 트리로 나뉘어진다.
-나뉘어진 두 서브 트리도 모두 이진 트리이어야 한다.
-노드가 위치할 수 있는 곳에 노드가 존재하지 않는다면 공집합 노드가 존재하는 것으로 간주

트리에서 각 층별로 숫자를 매긴 것을 '레벨'  최고 레벨을 가리켜 '높이'

포화이진트리 - 모든레벨이 꽉 차 있는 것. 
완전 이진 트리 - 차곡차곡 빈 틈 없이 노드가 채워진 이진 트리 (노드가 위에서 아래로, 왼쪽에서 오른쪽의 순으로 채워진 것)

트리 ADT

BTreeNode * MakeBTreeNode(void);
-이진 트리 노드를 생성하여 그 주소 값을 반환한다.

BTData GetData(BTreeNode * bt);
-노드에 저장된 데이터를 반환한다.
void SetData(BTreeNode * bt, BTData data);
-노드에 데이터를 저장한다. data로 전달된 값을 저장한다.

BTreeNode * GetLeftSubTree(BTreeNode * bt);
-왼쪽 서브 트리의 주소 값을 반환한다.
BTreeNode * GetRightSubTree(BTreeNode * bt);
-오른쪽 서브 트리의 주소 값을 반환하다.

void MakeLeftSubTree(BTreeNode * main, BTreeNode * sub);
-왼쪽 서브 트리를 연결한다.
void MakeRightSubTree(BTreeNode * main, BTreeNode * sub);
-오른쪽 서브 트리를 연결한다.